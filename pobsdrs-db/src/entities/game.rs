//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "game")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub cover: String,
    pub setup: String,
    pub hints: String,
    pub year: String,
    pub version: String,
    pub status: String,
    pub added: String,
    pub updated: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::store_link::Entity")]
    StoreLink,
}

impl Related<super::store_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StoreLink.def()
    }
}

impl Related<super::dev::Entity> for Entity {
    fn to() -> RelationDef {
        super::dev_game::Relation::Dev.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::dev_game::Relation::Game.def().rev())
    }
}

impl Related<super::runtime::Entity> for Entity {
    fn to() -> RelationDef {
        super::runtime_game::Relation::Runtime.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::runtime_game::Relation::Game.def().rev())
    }
}

impl Related<super::engine::Entity> for Entity {
    fn to() -> RelationDef {
        super::engine_game::Relation::Engine.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::engine_game::Relation::Game.def().rev())
    }
}


impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::tag_game::Relation::Tag.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::tag_game::Relation::Game.def().rev())
    }
}

impl Related<super::publi::Entity> for Entity {
    fn to() -> RelationDef {
        super::publi_game::Relation::Publi.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::publi_game::Relation::Game.def().rev())
    }
}
impl ActiveModelBehavior for ActiveModel {}
